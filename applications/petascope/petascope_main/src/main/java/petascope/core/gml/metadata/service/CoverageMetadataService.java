/*
 * This file is part of rasdaman community.
 *
 * Rasdaman community is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Rasdaman community is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU  General Public License for more details.
 *
 * You should have received a copy of the GNU  General Public License
 * along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2003 - 2017 Peter Baumann / rasdaman GmbH.
 *
 * For more information please see <http://www.rasdaman.org>
 * or contact Peter Baumann via <baumann@rasdaman.com>.
 */
package petascope.core.gml.metadata.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import java.io.IOException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import petascope.core.gml.metadata.model.CoverageMetadata;
import petascope.core.gml.metadata.model.LocalMetadataChild;
import petascope.exceptions.ExceptionCode;
import petascope.exceptions.PetascopeException;
import petascope.util.JSONUtil;
import petascope.util.XMLUtil;
import petascope.wcps.exception.processing.InvalidCoverageMetadataToDeserializeException;

/**
 *
 * Utility class to serialize/deserialize coverage's metadata.
 *
 * @author <a href="mailto:b.phamhuu@jacobs-university.de">Bang Pham Huu</a>
 */
@Service
public class CoverageMetadataService {

    private static final Logger log = LoggerFactory.getLogger(CoverageMetadataService.class);
    
    public CoverageMetadataService() {
        
    }  
    
    /**
     * A quick naive check if coverage's metada is in XML format.
     */
    public boolean metadataInXML(String metadata) {
        return metadata.startsWith("<");
    }
    
    /**
     * Serialize CoverageMetadata object to JSON string to be persisted inside database.
     */
    public String serializeCoverageMetadataInJSON(CoverageMetadata coverageMetadata) throws PetascopeException {
        String output = "";
        try {
            output = JSONUtil.serializeObjectToJSONString(coverageMetadata);
        } catch (JsonProcessingException ex) {
            throw new PetascopeException(ExceptionCode.RuntimeError, 
                    "Cannot serialize CoverageMetadata object to JSON string. Reason: " + ex.getMessage(), ex);
        }
        
        return output;
    }
    
    /**
     * Serialize CoverageMetadata object to XML string to be persisted inside database.
     */
    public String serializeCoverageMetadataInXML(CoverageMetadata coverageMetadata) throws PetascopeException {
        String output = "";
        try {
            output = XMLUtil.serializeObjectToXMLString(coverageMetadata);
            // NOTE: don't store the root tag (<CoverageMetadata> generated by Jackson)
            output = output.replace(CoverageMetadata.XML_ROOT_OPEN_TAG, "")
                            .replace(CoverageMetadata.XML_ROOT_CLOSE_TAG, "");
        } catch (JsonProcessingException ex) {
            throw new PetascopeException(ExceptionCode.RuntimeError, 
                    "Cannot serialize CoverageMetadata object to XML string. Reason: " + ex.getMessage(), ex);
        }
        
        return output;
    }
    
    /**
     * Deserialize medata (coverage's local metadata) in string from input GML coverage of UpdateCoverage request
     * to a LocalMetadata object.
     *
     */
    public LocalMetadataChild deserializeLocalMetadata(String metadata) {
        LocalMetadataChild localMetadata = new LocalMetadataChild();
        XmlMapper xmlMapper = new XmlMapper();
        
        ObjectMapper objectMapper = new ObjectMapper();
        
        try {
            //find out the type
            if (this.metadataInXML(metadata)) {
                //xml
                //the contents that the xmlMapper can read into a map must currently come from inside an outer tag, which is ignored
                //so we are just adding them
                localMetadata = xmlMapper.readValue(METADATA_OPEN_TAG + metadata + METADATA_CLOSE_TAG, LocalMetadataChild.class);
            } else {
                //json
                localMetadata = objectMapper.readValue(metadata, LocalMetadataChild.class);
            }
        } catch (IOException ex) {
            throw new InvalidCoverageMetadataToDeserializeException(ex.getMessage(), ex);
        }
        
        return localMetadata;
    }
     
    /**
     * Deserialize the coverage's metadata in XML/JSON format of gmlcov:metadata element
     * to and object to manipulate.
     * 
     * @param metadata
     * @return 
     */
    public CoverageMetadata deserializeCoverageMetadata(String metadata) {
        // Don't do anything if metadata is empty as it is not valid XML/JSON
        if (metadata.isEmpty()) {
            return new CoverageMetadata();
        }
        
        CoverageMetadata coverageMetadata = new CoverageMetadata();
        XmlMapper xmlMapper = new XmlMapper();
        
        ObjectMapper objectMapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        //remove the slices and the gmlcov:metadata closing tag if it exists
        // metadata = removeMetadataSlices(metadata).replace("<gmlcov:metadata />", "");
        //convert to object
        try {
            //find out the type
            if (this.metadataInXML(metadata)) {
                //xml
                //the contents that the xmlMapper can read into a map must currently come from inside an outer tag, which is ignored
                //so we are just adding them
                coverageMetadata = xmlMapper.readValue(METADATA_OPEN_TAG + metadata + METADATA_CLOSE_TAG, CoverageMetadata.class);
            } else {
                //json
                coverageMetadata = objectMapper.readValue(metadata, CoverageMetadata.class);
            }
        } catch (IOException ex) {
            throw new InvalidCoverageMetadataToDeserializeException(ex.getMessage(), ex);
        }
        
        return coverageMetadata;
    }    

    private final static String METADATA_OPEN_TAG = "<metadata>";
    private final static String METADATA_CLOSE_TAG = "</metadata>";
}

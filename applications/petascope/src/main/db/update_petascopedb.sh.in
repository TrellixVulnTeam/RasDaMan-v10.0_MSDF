#!/bin/bash
#
# This file is part of rasdaman community.
#
# Rasdaman community is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Rasdaman community is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Peter Baumann /
# rasdaman GmbH.
#
# For more information please see <http://www.rasdaman.org>
# or contact Peter Baumann via <baumann@rasdaman.com>.
#
# ------------------------------------------------------------------------------
#
# SYNOPSIS
# ./update_petascopedb.sh [--empty] [--migrate]
#
# Description
#  Command-line utility for updating the petascope database. The updating is
#  done by importing all appropriate updateX.sql files to postgres. The script
#  determines automatically which updates need to be imported. There are two
#  cases:
#   1. no petascope database is present, in which case the updates start from 0.
#   2. a ps_dbupdates table is present, in this case the updates start from the
#      number saved in the update column.
#
#  Database connection details are read from etc/petascope.properties
#
# PRECONDITIONS
#  1) PostgreSQL server must be running
#  2) etc/petascope.properties should be present, and the metadata_user should
#     have appropriate write rights in postgres.
#  3) share/rasdaman/petascope should contain the SQL update scripts

PROG=$( basename $0 )

# argument name
EMPTY_ARG='--empty'
MIGRATE_ARG='--migrate'

# argument variables (flags)
EMPTY_DB=''
MIGRATE_COVERAGES=''

# synopsis message
USAGE="
    usage: $PROG [$EMPTY_ARG] [$MIGRATE_ARG]
    where:
    $EMPTY_ARG
        Do not INSERT any metadata in the database (not recommended).
    $MIGRATE_ARG
        Migrate pre-existing coverages in ps_* tables to the new schema (ps9_* tables).
"
# In case the usage changes, consequently adjust these values:
MIN_ARGS=0
MAX_ARGS=2

CODE_OK=0
CODE_FAIL=255

# petascope settings file
SETTINGS=@sysconfdir@/petascope.properties

# petascope updateN.sql scripts
SCRIPT_DIR=@pkgdatadir@/petascope

# petascopedb tables
PS_DBUPDATE=ps_dbupdates

# ------------------------------------------------------------------------------
# functions
# ------------------------------------------------------------------------------

#
# logging
#
log() {
  echo "$PROG: $*"
}
logn() {
  echo -n "$PROG: $*"
}
error() {
  echo "$PROG: $*" >&2
  echo "$PROG: exiting." >&2
  exit $CODE_FAIL
}
feedback() {
  if [ $? -ne 0 ]; then
    echo failed.
    echo "$PROG: exiting." >&2
    exit $CODE_FAIL
  else
    echo ok.
  fi
}

#
# checks
#
check_postgres() {
  which psql > /dev/null || error "PostgreSQL missing, please add psql to the PATH."
  pgrep postgres > /dev/null
  if [ $? -ne 0 ]; then
    pgrep postmaster > /dev/null || error "The PostgreSQL service is not started."
  fi
}
check_dblink() {
  if [ -z "$DBLINK_SQL" ]; then
    error "dblink PostgreSQL additional module was not found: please install."
  fi
}
check_paths() {
  if [ ! -f "$SETTINGS" ]; then
    error "petascope settings not found: $SETTINGS"
  fi
  if [ ! -d "$SCRIPT_DIR" ]; then
    error "SQL update script directory not found: $SCRIPT_DIR"
  fi
}
check_args_number() {
  if [ $1 -lt $MIN_ARGS -o $1 -gt $MAX_ARGS ]
  then
    error "$USAGE"
fi
}
check_ret() {
  if [ "$1" -ne 0 ]; then
    error "FAILED (return value $1)."
  fi
}
# ------------------------------------------------------------------------------
# work
# ------------------------------------------------------------------------------

check_paths

#
# check command arguments
#
check_args_number $#
while [ $# -gt 0 ]; do
  case "$1" in
    $EMPTY_ARG) EMPTY_DB="$1";;
    $MIGRATE_ARG) MIGRATE_COVERAGES="$1";;
    *) error "$USAGE";;
  esac
  shift
done

#
# postgres connection details
#
PS_USER=`grep metadata_user "$SETTINGS" | awk -F "=" '{print $2}'`
PS_USER="${PS_USER#"${PS_USER%%[![:space:]]*}"}"
PS_PASS=`grep metadata_pass "$SETTINGS" | awk -F "=" '{print $2}'`
PS_PASS="${PS_PASS#"${PS_PASS%%[![:space:]]*}"}"
PS_DB=`grep metadata_url "$SETTINGS" | awk -F "/" '{print $4}' | tr -d '\n'`
PS_PORT=`grep metadata_url "$SETTINGS" | awk -F ":|/" '{print $6}' | tr -d '\n'`

# add user/pass to the .pgpass file
PGPASS_LINE="$HOSTNAME:*:*:$PS_USER:$PS_PASS"
PGPASS_FILE="$HOME/.pgpass"
if [ ! -f $PGPASS_FILE ]; then
  if [ -w $HOME ]; then
    echo "$PGPASS_LINE" > $PGPASS_FILE
    chmod 600 $PGPASS_FILE
  fi
else
  grep "$PS_USER" $PGPASS_FILE > /dev/null
  if [ $? -ne 0 ]; then
    echo "$PGPASS_LINE" >> $PGPASS_FILE
  fi
fi

#
# commands
#
PSQL="psql -U $PS_USER -d $PS_DB -p $PS_PORT"
CREATEDB="createdb -U $PS_USER -p $PS_PORT"
SINGLE_TRANSACTION="--set ON_ERROR_STOP=on --single-transaction"

#
# SQL scripts
#
UTILITIES_SQL="utilities.sql"
GLOBAL_CONST_SQL="global_const.sql"
TRIGGERS_SQL="triggers.sql"
SCHEMA_SQL="schema.sql"
POPULATE_SQL="populate.sql"
MIGRATE_SQL="migrate.sql"
MACROS_SQL="macros.sql"
DBLINK_SQL=$( locate dblink.sql | head -n 1 )

# print some info
log "postgres settings read from $SETTINGS"
log "  user: $PS_USER"
log "  port: $PS_PORT"
log "  db: $PS_DB"

check_postgres

#
# create db if not present
#
psql -U $PS_USER -p $PS_PORT --list 2>&1 | egrep "\b$PS_DB\b" > /dev/null
if [ $? -ne 0 ]; then
  logn "no petascope database found, creating... "
  $CREATEDB $PS_DB > /dev/null
  feedback
fi


#
# some updates are written in PL/pgSQL, so install the extension in postgres
#
createlang plpgsql -U $PS_USER -p $PS_PORT $PS_DB > /dev/null 2>&1
rc=$?
if [ $rc -ne 0 -a $rc -ne 2 ]; then
  error "failed creating PL/pgSQL extension in PostgreSQL, please install it first on your system."
fi

#
# run the SQL scripts
#
log "Loading utilities and global constants ... "
$PSQL $SINGLE_TRANSACTION -f "$SCRIPT_DIR/$UTILITIES_SQL" > /dev/null 2>&1
check_ret $?
$PSQL $SINGLE_TRANSACTION -f "$SCRIPT_DIR/$GLOBAL_CONST_SQL"  > /dev/null 2>&1
check_ret $?

log "Loading triggers ... "
$PSQL $SINGLE_TRANSACTION -f "$SCRIPT_DIR/$TRIGGERS_SQL" > /dev/null 2>&1
check_ret $?

log "Creating schema for PS9_* tables ... "
$PSQL $SINGLE_TRANSACTION -f "$SCRIPT_DIR/$SCHEMA_SQL" > /dev/null 2>&1
check_ret $?

if [ -z "$EMPTY_DB" ]; then
  log "Populating tables with some required metadata ... "
  $PSQL $SINGLE_TRANSACTION -f "$SCRIPT_DIR/$POPULATE_SQL" > /dev/null 2>&1
  check_ret $?
fi

if [ -n "$MIGRATE_COVERAGES" ]; then
  log "Installing dblink module to $PS_DB and RASBASE db... "
  check_dblink
  psql -U "$PS_USER" -p "$PS_PORT" -f "$DBLINK_SQL" -d "$PS_DB"  > /dev/null 2>&1
  psql -U "$PS_USER" -p "$PS_PORT" -f "$DBLINK_SQL" -d "RASBASE" > /dev/null 2>&1
  log "Migrating existing coverages from PS_* tables ... "
  $PSQL $SINGLE_TRANSACTION -f "$SCRIPT_DIR/$MIGRATE_SQL"
  check_ret $?
fi

log "Loading macros ... "
$PSQL $SINGLE_TRANSACTION -f "$SCRIPT_DIR/$MACROS_SQL" > /dev/null 2>&1
check_ret $?

#
# done
#
echo
log "done, exiting."
exit $CODE_OK

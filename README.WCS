This is an implementation of the Web Coverage Processing Service (WCPS) over rasdaman, and the Web Coverage Service (WCS) over WCPS. This file contains important information about how to deploy, use, and extend the WCS service. For information about the WCPS service, read file README.WCPS.


========== WCS ============

This is the project folder of the WCS (Web Coverage Service) over WCPS (Web Coverage Processing Service) service, developed by Andrei Aiordachioaie, as a student at Jacobs University. 

Based on the existing implementation of WCPS (available at http://kahlua.eecs.jacobs-university.de:8080/wcps-maitai/), this is a web service that simulates a WCS server. 


1. Architecture

The WCS service is implemented as a servlet and runs within a servlet container such as tomcat.

Given a XML request for some coverage(s), it converts it to a WCPS XML request, that it passes on to the WCPS server, and returns the result to the user. It also uses a relational database to obtain additional information (metadata) about the coverage(s).

The distribution also contains a command-line utility for testing. It simulates the WCS operation on any input XML file, with details specified in the file *src/input-output.txt*

2. Web Service Operation

There are 3 operations that the WCS server offers:
1) GetCapabilities operation
	- takes a GetCapabilities XML document, and returns a Capabilities XML document
	- returns an XML document with details about the capabilities of this server, and a list of available coverages
2) DescribeCoverage
	- takes a DescribeCoverage XML document, and returns a CoverageDescriptions XML document
	- returns full details about one (or more) coverages, as stored in the metadata database
3) GetCoverage
	- takes a GetCoverage XML document, and returns a ProcessCoverage XML document. The response document must be manually fed into the WCPS server.
	- converts the XML structure from WCS format into the WCPS format.


3. System requirements

1) Java 6 for building and running. Tested with Sun's JDK.
2) A servlet container. Tested with Apache Tomcat 5.5.
3) A relational database for metadata. Tested with PostgreSQL 7.4.
4) A rasdaman raster database. Tested with rasdaman 6.


4. Compilation Instructions
Just run "make all" from the project folder, and this will compile the WCS, along with the WCPS dependencies. 

5. Installation Instructions

- Deploy "wcs-andrei.war" to your Java application server. 
Your web service should now be running properly!


6. Developer instructions

You can use wcs.server.cli.CLI to write Java code and test each of the WCS operations in particular. The CLI class reads its input settings from the file "input-output.txt".
You can (and should) also use the test class (wcs.server.servlet.WCSTest) in order to test if the WCS works as expected. 

7. Directory structure

The WCS distribution contains the following directories and files:

lib/                    Required compiletime (see Makefile) and runtime (see Makefile and wcps.sh) libraries.
misc/                   The metadata database initialization SQL statements.
src/wcs/                All Java source code (package wcs.server.*) and the file "input-output.txt", with settings for the command line interface
xml/                    The XML schema used by WCPS.
dbparams.properties     Contains all information regarding database connections.
Makefile                Used to build WCS. Run "make all" in order to build everything.
README.WCS              This file.
wcs-cli.sh              A rudimentary script to run the command-line interface conveniently.
web-wcs.xml             A servlet descriptor required to deploy a service.

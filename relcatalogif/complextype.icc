/*
* This file is part of rasdaman community.
*
* Rasdaman community is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Rasdaman community is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
*
* Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Peter Baumann /
rasdaman GmbH.
*
* For more information please see <http://www.rasdaman.org>
* or contact Peter Baumann via <baumann@rasdaman.com>.
*/

///////////////////////////////////////////////////////////////
//  implementation - ComplexType1
///////////////////////////////////////////////////////////////

inline ComplexType1::ComplexType1()
    : GenericComplexType(ComplexType1::Name, 2 * sizeof(PartType)), reOffset(0), imOffset(sizeof(PartType))
{
    myType = COMPLEXTYPE1;
    myOId = OId(COMPLEXTYPE1, OId::ATOMICTYPEOID);
}

inline ComplexType1::ComplexType1(const OId &id)
    : GenericComplexType(id), reOffset(0), imOffset(sizeof(PartType))
{
    readFromDb();
}

inline ComplexType1::ComplexType1(const ComplexType1 &old)
    : GenericComplexType(old)
{
    reOffset = old.reOffset;
    imOffset = old.imOffset;
}

inline ComplexType1 &ComplexType1::operator =(const ComplexType1 &old)
{
    if (this == &old)
    {
        return *this;
    }
    AtomicType::operator =(old);
    reOffset = old.reOffset;
    imOffset = old.imOffset;
    return *this;
}

inline void ComplexType1::printCell(std::ostream &stream, const char *cell) const
{
    stream << "( Re: " << *(reinterpret_cast<const PartType *>(cell + reOffset)) << "\t"
           <<   "Im: " << *(reinterpret_cast<const PartType *>(cell + imOffset)) << " )\n";
}

inline void ComplexType1::readFromDb()
{
    size = 2 * sizeof(PartType);
    setName(ComplexType1::Name);
    myType = COMPLEXTYPE1;
    myOId = OId(COMPLEXTYPE1, OId::ATOMICTYPEOID);
}

inline unsigned int ComplexType1::getReOffset() const
{
    return reOffset;
}
inline unsigned int ComplexType1::getImOffset() const
{
    return imOffset;
}

inline r_ULong *ComplexType1::convertToCULong(const char *cell, r_ULong *value) const
{
    *value = static_cast<r_ULong>(*reinterpret_cast<const PartType *>(cell));
    return value;
}
inline char *ComplexType1::makeFromCULong(char *cell, const r_ULong *value) const
{
    *reinterpret_cast<PartType *>(cell) = static_cast<PartType>(*value);
    return cell;
}
inline r_Long *ComplexType1::convertToCLong(const char *cell, r_Long *value) const
{
    *value = static_cast<r_Long>(*reinterpret_cast<const PartType *>(cell));
    return value;
}
inline char *ComplexType1::makeFromCLong(char *cell, const r_Long *value) const
{
    *reinterpret_cast<PartType *>(cell) = static_cast<PartType>(*value);
    return cell;
}
inline r_Double *ComplexType1::convertToCDouble(const char *cell, r_Double *value) const
{
    *value = *reinterpret_cast<const PartType *>(cell);
    return value;
}
inline char *ComplexType1::makeFromCDouble(char *cell, const r_Double *value) const
{
    *reinterpret_cast<PartType *>(cell) = static_cast<PartType>(*value);
    return cell;
}
inline const char *ComplexType1::getTypeName() const
{
    return "complex";
}

///////////////////////////////////////////////////////////////
//  implementation - ComplexType2
///////////////////////////////////////////////////////////////

inline ComplexType2::ComplexType2()
    : GenericComplexType(ComplexType2::Name, 2 * sizeof(PartType)), reOffset(0), imOffset(sizeof(PartType))
{
    myType = COMPLEXTYPE2;
    myOId = OId(COMPLEXTYPE2, OId::ATOMICTYPEOID);
}

inline ComplexType2::ComplexType2(const OId &id)
    : GenericComplexType(id), reOffset(0), imOffset(sizeof(PartType))
{
    readFromDb();
}

inline ComplexType2::ComplexType2(const ComplexType2 &old)
    : GenericComplexType(old)
{
    reOffset = old.reOffset;
    imOffset = old.imOffset;
}

inline ComplexType2 &ComplexType2::operator =(const ComplexType2 &old)
{
    if (this == &old)
    {
        return *this;
    }
    AtomicType::operator =(old);
    reOffset = old.reOffset;
    imOffset = old.imOffset;
    return *this;
}

inline void ComplexType2::printCell(std::ostream &stream, const char *cell) const
{
    stream << "( Re: " << *(reinterpret_cast<const PartType *>(cell + reOffset)) << "\t"
           <<   "Im: " << *(reinterpret_cast<const PartType *>(cell + imOffset)) << " )\n";
}

inline void ComplexType2::readFromDb()
{
    size = 2 * sizeof(PartType);
    setName(ComplexType2::Name);
    myType = COMPLEXTYPE2;
    myOId = OId(COMPLEXTYPE2, OId::ATOMICTYPEOID);
}

inline unsigned int ComplexType2::getReOffset() const
{
    return reOffset;
}
inline unsigned int ComplexType2::getImOffset() const
{
    return imOffset;
}

inline r_ULong *ComplexType2::convertToCULong(const char *cell, r_ULong *value) const
{
    *value = static_cast<r_ULong>(*reinterpret_cast<const PartType *>(cell));
    return value;
}
inline char *ComplexType2::makeFromCULong(char *cell, const r_ULong *value) const
{
    *reinterpret_cast<PartType *>(cell) = static_cast<PartType>(*value);
    return cell;
}
inline r_Long *ComplexType2::convertToCLong(const char *cell, r_Long *value) const
{
    *value = static_cast<r_Long>(*reinterpret_cast<const PartType *>(cell));
    return value;
}
inline char *ComplexType2::makeFromCLong(char *cell, const r_Long *value) const
{
    *reinterpret_cast<PartType *>(cell) = static_cast<PartType>(*value);
    return cell;
}
inline r_Double *ComplexType2::convertToCDouble(const char *cell, r_Double *value) const
{
    *value = *reinterpret_cast<const PartType *>(cell);
    return value;
}
inline char *ComplexType2::makeFromCDouble(char *cell, const r_Double *value) const
{
    *reinterpret_cast<PartType *>(cell) = static_cast<PartType>(*value);
    return cell;
}
inline const char *ComplexType2::getTypeName() const
{
    return "complexd";
}

///////////////////////////////////////////////////////////////
//  implementation - CInt16
///////////////////////////////////////////////////////////////

inline CInt16::CInt16()
    : GenericComplexType(CInt16::Name, 2 * sizeof(PartType)), reOffset(0), imOffset(sizeof(PartType))
{
    myType = CINT16;
    myOId = OId(CINT16, OId::ATOMICTYPEOID);
}

inline CInt16::CInt16(const OId &id)
    : GenericComplexType(id), reOffset(0), imOffset(sizeof(PartType))
{
    readFromDb();
}

inline CInt16::CInt16(const CInt16 &old) : GenericComplexType(old)
{
    reOffset = old.reOffset;
    imOffset = old.imOffset;
}

inline CInt16 &CInt16::operator =(const CInt16 &old)
{
    if (this == &old)
    {
        return *this;
    }
    AtomicType::operator =(old);
    reOffset = old.reOffset;
    imOffset = old.imOffset;
    return *this;
}

inline void CInt16::printCell(std::ostream &stream, const char *cell) const
{
    stream << "( Re: " << *(reinterpret_cast<const PartType *>(cell + reOffset)) << "\t"
           <<   "Im: " << *(reinterpret_cast<const PartType *>(cell + imOffset)) << " )\n";
}

inline void CInt16::readFromDb()
{
    size = 2 * sizeof(PartType);
    setName(CInt16::Name);
    myType = CINT16;
    myOId = OId(CINT16, OId::ATOMICTYPEOID);
}

inline unsigned int CInt16::getReOffset() const
{
    return reOffset;
}
inline unsigned int CInt16::getImOffset() const
{
    return imOffset;
}

inline r_ULong *CInt16::convertToCULong(const char *cell, r_ULong *value) const
{
    *value = static_cast<r_ULong>(*reinterpret_cast<const PartType *>(cell));
    return value;
}
inline char *CInt16::makeFromCULong(char *cell, const r_ULong *value) const
{
    *reinterpret_cast<PartType *>(cell) = static_cast<PartType>(*value);
    return cell;
}
inline r_Long *CInt16::convertToCLong(const char *cell, r_Long *value) const
{
    *value = static_cast<r_Long>(*reinterpret_cast<const PartType *>(cell));
    return value;
}
inline char *CInt16::makeFromCLong(char *cell, const r_Long *value) const
{
    *reinterpret_cast<PartType *>(cell) = static_cast<PartType>(*value);
    return cell;
}
inline r_Double *CInt16::convertToCDouble(const char *cell, r_Double *value) const
{
    *value = *reinterpret_cast<const PartType *>(cell);
    return value;
}
inline char *CInt16::makeFromCDouble(char *cell, const r_Double *value) const
{
    *reinterpret_cast<PartType *>(cell) = static_cast<PartType>(*value);
    return cell;
}
inline const char *CInt16::getTypeName() const
{
    return "cint16";
}

///////////////////////////////////////////////////////////////
//  implementation - CInt32
///////////////////////////////////////////////////////////////

inline CInt32::CInt32()
    : GenericComplexType(CInt32::Name, 2 * sizeof(PartType)), reOffset(0), imOffset(sizeof(PartType))
{
    myType = CINT32;
    myOId = OId(CINT32, OId::ATOMICTYPEOID);
}

inline CInt32::CInt32(const OId &id)
    : GenericComplexType(id), reOffset(0), imOffset(sizeof(PartType))
{
    readFromDb();
}

inline CInt32::CInt32(const CInt32 &old)
    : GenericComplexType(old)
{
    reOffset = old.reOffset;
    imOffset = old.imOffset;
}

inline CInt32 &CInt32::operator =(const CInt32 &old)
{
    if (this == &old)
    {
        return *this;
    }
    AtomicType::operator =(old);
    reOffset = old.reOffset;
    imOffset = old.imOffset;
    return *this;
}

inline void CInt32::printCell(std::ostream &stream, const char *cell) const
{
    stream << "( Re: " << *(reinterpret_cast<const PartType *>(cell + reOffset)) << "\t"
           <<   "Im: " << *(reinterpret_cast<const PartType *>(cell + imOffset)) << " )\n";
}

inline void CInt32::readFromDb()
{
    size = 2 * sizeof(PartType);
    setName(CInt32::Name);
    myType = CINT32;
    myOId = OId(CINT32, OId::ATOMICTYPEOID);
}

inline unsigned int CInt32::getReOffset() const
{
    return reOffset;
}
inline unsigned int CInt32::getImOffset() const
{
    return imOffset;
}

inline r_ULong *CInt32::convertToCULong(const char *cell, r_ULong *value) const
{
    *value = static_cast<r_ULong>(*reinterpret_cast<const PartType *>(cell));
    return value;
}
inline char *CInt32::makeFromCULong(char *cell, const r_ULong *value) const
{
    *reinterpret_cast<PartType *>(cell) = static_cast<PartType>(*value);
    return cell;
}
inline r_Long *CInt32::convertToCLong(const char *cell, r_Long *value) const
{
    *value = static_cast<r_Long>(*reinterpret_cast<const PartType *>(cell));
    return value;
}
inline char *CInt32::makeFromCLong(char *cell, const r_Long *value) const
{
    *reinterpret_cast<PartType *>(cell) = static_cast<PartType>(*value);
    return cell;
}
inline r_Double *CInt32::convertToCDouble(const char *cell, r_Double *value) const
{
    *value = *reinterpret_cast<const PartType *>(cell);
    return value;
}
inline char *CInt32::makeFromCDouble(char *cell, const r_Double *value) const
{
    *reinterpret_cast<PartType *>(cell) = static_cast<PartType>(*value);
    return cell;
}
inline const char *CInt32::getTypeName() const
{
    return "cint32";
}

/*
 * This file is part of rasdaman community.
 *
 * Rasdaman community is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Rasdaman community is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014 Peter Baumann / rasdaman GmbH.
 *
 * For more information please see <http://www.rasdaman.org>
 * or contact Peter Baumann via <baumann@rasdaman.com>.
 */

package rasnet.service;

option java_package="org.rasdaman.rasnet.service";
option java_outer_classname="ClientRasServerService";

option cc_generic_services = true;
option java_generic_services = true;

import "common_service.proto";

//REGION: DATABASE METHODS
message OpenServerDatabaseReq {
    required int32 client_id = 1;
    required string database_name = 2;
}

message OpenServerDatabaseRepl {
}

message CloseServerDatabaseReq {
    required int32 client_id = 1;
}

message CreateDatabaseReq {
    required int32 client_id = 1;
    required string database_name = 2;
}

message CreateDatabaseRepl {

}

message DestroyDatabaseReq {
    required int32 client_id = 1;
    required string database_name = 2;
}

message DestroyDatabaseRepl {

}
//ENDREGION: DATABASE METHODS


//REGION: TRANSACTION METHODS
message BeginTransactionReq {
    required int32 client_id = 1;
    required bool rw = 2;
}

message BeginTransactionRepl {
}

message CommitTransactionReq {
    required int32 client_id = 1;
}

message CommitTransactionRepl {
}

message AbortTransactionReq {
    required int32 client_id = 1;
}

message AbortTransactionRepl {
}

message IsTransactionOpenReq {
    required int32 client_id = 1;
}

message IsTransactionOpenRepl {
    required bool isOpen = 1;
}
//ENDREGION: TRANSACTION METHODS

//REGION: MDD METHODS
message StartInsertMDDReq {
    required int32 client_id = 1;
    required string collName = 2;
    required bytes domain = 3;
    required int32 type_length = 4;
    required string type_name = 5;
    required string oid = 6;
}

message StartInsertMDDRepl {
    required int32 status = 1;
}

message InsertTileReq {
    required int32 client_id = 1;
    required bool persistent = 2;
    required string domain = 3;
    required int32 type_length  = 4;
    required int32 current_format = 5;
    required int32 storage_format = 6;
    required bytes data = 7;
    required int32 data_length = 8;
}

message InsertTileRepl {
    required int32 status = 1;
}

message EndInsertMDDReq {
    required int32 client_id = 1;
    required bool persistent = 2;
}

message EndInsertMDDRepl {
    required int32 status = 1;
}

message StartInsertTransMDDReq {
    required int32 client_id = 1;
    required string domain = 2;
    required int32 type_length = 3;
    required string type_name = 4;
}

message StartInsertTransMDDRepl {
    required int32 status = 1;
}

//ENDREGION: MDD METHODS

//REGION: COLLECTION METHODS
message InsertCollectionReq {
    required int32 client_id = 1;
    required string collection_name = 2;
    required string type_name = 3;
    required string oid = 4;
}

message InsertCollectionRepl {
    required int32 status = 1;
}

message DeleteCollectionByNameReq {
    required int32 client_id = 1;
    required string collection_name = 2;
}

message DeleteCollectionByNameRepl {
    required int32 status = 1;
}

message DeleteCollectionByOidReq {
    required int32 client_id = 1;
    required string oid = 2;
}

message DeleteCollectionByOidRepl {
    required int32 status = 1;
}

message GetCollectionByNameOrOidReq {
    required int32 client_id = 1;
    required string collection_identifier = 2;
    required bool is_name = 3;
}

message GetCollectionByNameOrOidRepl {
    optional string type_name = 1;
    optional string type_structure = 2;
    optional string oid = 3;
    optional string collection_name = 4;
    required int32 status = 5;
}

message GetCollOidsByNameOrOidReq {
    required int32 client_id = 1;
    required string collection_identifier = 2;
    required bool is_name = 3;
}

message GetCollOidsByNameOrOidRepl {
    required int32 status = 1;
    optional string type_name = 2;
    optional string type_structure = 3;
    optional string oids_string = 4;
    optional string collection_name = 5;
    repeated string oid_set = 6;
}

message RemoveObjectFromCollectionReq {
    required int32 client_id = 1;
    required string collection_name = 2;
    required string oid = 3;
}

message RemoveObjectFromCollectionRepl {
    required int32 status = 1;
}

message GetNextMDDReq {
    required int32 client_id = 1;
}

message GetNextMDDRepl {
    required int32 status = 1;
    required string domain = 2;
    required string type_name = 3;
    required string type_structure = 4;
    required string oid = 5;
    required int32 current_format = 6;
}

message GetNextTileReq {
    required int32 client_id = 1;
}

message GetNextTileRepl {
    required int32 status = 1;
    required string domain = 2;
    required int32 cell_type_length = 3;
    required int32 current_format = 4;
    required int32 storage_format = 5;
    required int32 data_length = 6;
    required bytes data = 7;
}

message EndTransferReq {
    required int32 client_id = 1;
}

message EndTransferRepl {
    required int32 status = 1;
}

//ENDREGION: COLLECTION METHODS

//REGION: QUERY METHODS
message InitUpdateReq {
    required int32 client_id = 1;
}

message InitUpdateRepl {
    required int32 status = 1;
}

message ExecuteQueryReq {
    required int32 client_id = 1;
    required string query = 2;
}

message ExecuteQueryRepl {
    required int32 status = 1;
    required int32 err_no = 2;
    required int32 line_no = 3;
    required int32 col_no = 4;
    required string token = 5;
    required string type_name = 6;
    required string type_structure = 7;
}

message ExecuteHttpQueryReq {
    required int32 client_id = 1;
    required bytes data = 2;
    required int32 data_length = 3;
}

message ExecuteHttpQueryRepl {
    required bytes data = 1;
}

message GetNextElementReq {
    required int32 client_id = 1;
}

message GetNextElementRepl {
    required int32 status = 2;
    required int32 data_length = 3;
    required bytes data = 4;
}

message ExecuteUpdateQueryReq {
    required int32 client_id = 1;
    required string query = 2;
}

message ExecuteUpdateQueryRepl {
    required int32 status = 1;
    required int32 erroNo = 2;
    required int32 lineNo = 3;
    required int32 colNo = 4;
    required string token = 5;
}

message ExecuteInsertQueryReq {
    required int32 client_id = 1;
    required string query = 2;
}

message ExecuteInsertQueryRepl {
    required int32 status = 1;
    required int32 erroNo = 2;
    required int32 lineNo = 3;
    required int32 colNo = 4;
    required string token = 5;
    required string type_name = 6;
    required string type_structure = 7;
}


//ENDREGION: QUERYMETHODS

//REGION: SYSTEM METHODS
message GetNewOidReq {
    required int32 client_id = 1;
    required int32 object_type = 2;
}

message GetNewOidRepl {
    required string oid = 1;
}

message GetObjectTypeReq {
    required int32 client_id = 1;
    required string oid = 2;
}

message GetObjectTypeRepl {
    required int32 status = 1;
    optional int32 object_type = 2;
}

message GetTypeStructureReq {
    required int32 client_id = 1;
    required string type_name = 2;
    required int32 type_type = 3;
}

message GetTypeStructureRepl {
    required int32 status = 1;
    required string type_structure = 2;
}

message SetFormatReq {
    required int32 client_id = 1;
    required int32 transfer_format = 2;
    required int32 format = 3;
    required string format_params = 4;
}

message SetFormatRepl {
    required int32 status = 2;
}
//ENDREGION: SYSTEM METHODS

message KeepAliveRequest {
    required string client_uuid = 1;
    required string session_id = 2;
}

service ClientRassrvrService {
    rpc OpenServerDatabase (OpenServerDatabaseReq) returns (OpenServerDatabaseRepl);
    rpc CloseServerDatabase (CloseServerDatabaseReq) returns (rasnet.service.Void);
    rpc CreateDatabase (CreateDatabaseReq) returns (CreateDatabaseRepl);
    rpc DestroyDatabase (DestroyDatabaseReq) returns (DestroyDatabaseRepl);
    rpc BeginTransaction (BeginTransactionReq) returns (BeginTransactionRepl);
    rpc CommitTransaction (CommitTransactionReq) returns (CommitTransactionRepl);
    rpc AbortTransaction (AbortTransactionReq) returns (AbortTransactionRepl);
    rpc IsTransactionOpen (IsTransactionOpenReq) returns (IsTransactionOpenRepl);
    rpc StartInsertMDD (StartInsertMDDReq) returns (StartInsertMDDRepl);
    rpc StartInsertTransMDD (StartInsertTransMDDReq) returns (StartInsertTransMDDRepl);
    rpc InsertTile (InsertTileReq) returns (InsertTileRepl);
    rpc EndInsertMDD (EndInsertMDDReq) returns (EndInsertMDDRepl);
    rpc InsertCollection (InsertCollectionReq) returns (InsertCollectionRepl);
    rpc DeleteCollectionByName (DeleteCollectionByNameReq) returns (DeleteCollectionByNameRepl);
    rpc DeleteCollectionByOid (DeleteCollectionByOidReq) returns (DeleteCollectionByOidRepl);
    rpc RemoveObjectFromCollection (RemoveObjectFromCollectionReq) returns (RemoveObjectFromCollectionRepl);
    rpc GetCollectionByNameOrOid (GetCollectionByNameOrOidReq) returns (GetCollectionByNameOrOidRepl);
    rpc GetCollOidsByNameOrOid (GetCollOidsByNameOrOidReq) returns (GetCollOidsByNameOrOidRepl);
    rpc GetNextMDD (GetNextMDDReq) returns (GetNextMDDRepl);
    rpc GetNextTile (GetNextTileReq) returns (GetNextTileRepl);
    rpc EndTransfer (EndTransferReq) returns (EndTransferRepl);
    rpc InitUpdate (InitUpdateReq) returns (InitUpdateRepl);
    rpc ExecuteQuery (ExecuteQueryReq) returns (ExecuteQueryRepl);
    rpc ExecuteHttpQuery (ExecuteHttpQueryReq) returns (ExecuteHttpQueryRepl);
    rpc GetNextElement (GetNextElementReq) returns (GetNextElementRepl);
    rpc ExecuteUpdateQuery (ExecuteUpdateQueryReq) returns (ExecuteUpdateQueryRepl);
    rpc ExecuteInsertQuery (ExecuteInsertQueryReq) returns (ExecuteInsertQueryRepl);
    rpc GetNewOid (GetNewOidReq) returns (GetNewOidRepl);
    rpc GetObjectType (GetObjectTypeReq) returns (GetObjectTypeRepl);
    rpc GetTypeStructure (GetTypeStructureReq) returns (GetTypeStructureRepl);
    rpc SetFormat (SetFormatReq) returns (SetFormatRepl);
    rpc KeepAlive (KeepAliveRequest) returns (rasnet.service.Void);
}

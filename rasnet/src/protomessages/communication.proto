/*
 * This file is part of rasdaman community.
 *
 * Rasdaman community is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Rasdaman community is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014 Peter Baumann / rasdaman GmbH.
 *
 * For more information please see <http://www.rasdaman.org>
 * or contact Peter Baumann via <baumann@rasdaman.com>.
 */

package rasnet;
option java_package="org.rasdaman.rasnet.message";
/**
 * A ConnectRequest message is sent by the client
 * when initiating a connection with the server.
 */
message ExternalConnectRequest {
	//The number of times the server should try to contact the client
	//before giving up and declaring the client dead
	required int32 retries = 1;

	//The number of milliseconds between each consecutive
	//retry
	required int32 period = 2;
}

/**
 * A ConnectReply message is sent by the server after receiving a ConnectRequest from a client.
 */
message ExternalConnectReply {
	//The number of times the client should try to contact the server
	//before giving up and declaring the client dead
	required int32 retries = 2;

	//The number of milliseconds between each consecutive retry
	required int32 period = 3;
}

message InternalConnectRequest{
}

message InternalConnectReply{
	required bool success = 1;
}

message InternalDisconnectRequest{
}

message InternalDisconnectReply{
}

/**
 * An AlivePing message is sent by a peer when it wants to see if another peer is alive
 */
message AlivePing {
}

/**
 * An AlivePong message is sent by a peer as a response to an AlivePing message.
 */
message AlivePong {
}

/*
* This file is part of rasdaman community.
*
* Rasdaman community is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Rasdaman community is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
*
* Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Peter Baumann /
rasdaman GmbH.
*
* For more information please see <http://www.rasdaman.org>
* or contact Peter Baumann via <baumann@rasdaman.com>.
*/
/** ***********************************************************
 * <pre>
 *
 * PURPOSE: 
 *
 *
 *
 * COMMENTS:
 *
 * </pre>
 *********************************************************** */
package rasj.odmg;

import org.odmg.*;
import rasj.*;
import rasj.clientcommhttp.*;
import rasj.global.*;

/**
 * This class implements the ODMG Transaction interface.
 *
 * @version 1.0  (07-Apr-2000)
 *
 * @author Peter Zoller
 */
public class RasTransaction implements Transaction
{
    /**
     * This variable holds a reference to the RasODMGImplementation object which created 
     * this RasDatabase object
     */
    //private RasODMGImplementation rasImplementation=null;
    private RasImplementationInterface rasImplementation=null;
    

    public RasTransaction(RasImplementationInterface imp)
    {
      rasImplementation=imp;
     }
    /**
     * Not implemented yet.
     */
    public void join()
    {
	throw new NotImplementedException();
    }

    /**
     * Not implemented yet.
     */
    public void leave()
    {
	throw new NotImplementedException();
    }

    /**
     * Begin a transaction.
     */
    public void begin()
    {

        rasImplementation.beginTA(); 
    }

    /**
     * Returns TRUE if a transaction is currently open.
     */
    public boolean isOpen()
    {
        Debug.talkCritical( "RasTransaction::isOpen: calling rasImplementation.isOpenTA()" );
        return rasImplementation.isOpenTA();  
    }

    /**
     * Commit a transaction.
     */
    public void commit()
    {

        rasImplementation.commitTA();
    }

    /**
     * Abort a transaction.
     */
    public void abort()
    {
        rasImplementation.abortTA();    
    }

    /**
     * Not implemented yet.
     */
    public void checkpoint()
    {
	throw new NotImplementedException();
    }

    /**
     * Not implemented yet.
     */
    public void lock(Object obj, int mode) throws LockNotGrantedException
    {
	throw new NotImplementedException();
    }

    /**
     * Not implemented yet.
     */
    public boolean tryLock(Object obj, int mode)
    {
	throw new NotImplementedException();
    }

    /**
     * Returns the errorStatus.
     */

    public String getErrorStatus()
    {
	return rasImplementation.getErrorStatus();
    }

}

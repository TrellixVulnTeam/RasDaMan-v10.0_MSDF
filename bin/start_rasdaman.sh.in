#!/bin/bash
#
# This file is part of rasdaman community.
#
# Rasdaman community is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Rasdaman community is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Peter Baumann /
# rasdaman GmbH.
#
# For more information please see <http://www.rasdaman.org>
# or contact Peter Baumann via <baumann@rasdaman.com>.      
#

#
# start_rasdaman.sh - start rasdaman server complex
#
# SYNTAX
#	start_rasdaman.sh [servers...]
#
# DESCRIPTION
#	This script starts rasdaman.
#	Which rasdaman servers are started depends on the 'server' name(s) provided:
#	* If no server name is provided then the environment variable $RASSERVERS is
#	  inspected to obtain a list of servers to be started. If $RASSERVERS is not
#	  set, then all rasdaman servers defined will be attempted to start.
#	* If at least one parameter is provided then all parameters 
#	  will be treated as a server name which is tried to be started.
#
#	One possible reason while not all servers may come up is that more servers
#	might be defined than your licence model allows to run in parallel.
#
#	To log in to the server, the external variable $RASLOGIN is expected to hold
#	an ID string (see rasdaman manual). If not found, a desperate last attempt is 
#	made to login as rasadmin/rasadmin. If this fails, no servers are started at all.
#
# PRECONDITIONS
#	- need to have a rasdaman admin login either from $RASLOGIN or as rasadmin/rasadmin
#	- need to run with an effective user id that allows to write into log/
#	- need to have a valid rasdaman installation
#
# RETURN CODES
	RC_OK=0		# everything went fine
	RC_ERROR=1	# something went wrong

# --- CONSTANTS -----------------------------------------------------

# sleep time to let rasmgr establish before spawning servers
WAIT_FOR_CHILDREN=5

# get script name
MYNAME=`basename $0`

# error messages:
ERROR_PARAM="ERS001 Error: illegal parameter: $1"

# base DBMS used by petascope
PETASCOPEDB=@petascopedb@
PETASCOPEDB_PGSQL=postgresql
PETASCOPEDB_HSQLDB=hsqldb
PETASCOPEDB_SQLITE=sqlite

# --- END CONSTANTS -------------------------------------------------

# --- ACTION --------------------------------------------------------

echo $MYNAME: starting rasdaman server complex...

# --- start rasmgr: -------------------------------------------------

# here we want to put all log files
cd @logdir@

# check if we can actually write anything here
if [ ! -w . ]
then
  echo "$MYNAME: User $USER has no write permissions in @logdir@, rasdaman cannot be started." >&2
  exit $RC_ERROR
fi

# clear previous log file
rm -f nohup.out

# start rasdaman server manager as demon; log will go into nohup.out
# the manager is started in quiet mode
nohup @bindir@rasmgr & 2>&1

# --- start servers: -------------------------------------------------

# allow process to establish
sleep $WAIT_FOR_CHILDREN

# these servers will be started:
if [ $1 ]
then
	# parameters provided, take them as server names
	SERVERS=$*
else
	if [ "$RASSERVERS" ]; then
		SERVERS=$RASSERVERS
	else
		SERVERS=""
	fi
fi

# determine rascontrol login
if [ -z "$RASLOGIN" ]; then
	export RASLOGIN=rasadmin:d293a15562d3e70b6fdc5ee452eaed40
fi

# ...then spawn server workers
if [ "$SERVERS" ]; then
	for SRV in $SERVERS
	do
		echo -n $MYNAME: starting server $SRV...
		@bindir@rascontrol -e -q -x up srv $SRV || exit $!
	done
else
	echo $MYNAME: starting all rasdaman servers...
	@bindir@rascontrol -e -q -x up srv -all || exit $!
fi

# ...then start Jetty (BangPH: 13.38 24/08/2015)
#---------------------------------------------------
petascopePath=@wardir@ # Start jetty embedded @wardir@
configPath=@sysconfdir@; # @sysconfdir@ ($RMANHOME)
installPath=`echo ${configPath:0:-3}` # get only the path before /etc (default is /home/rasdaman/install)

pid=`ps -ef | grep '[r]asdaman/war/jetty.jar' | awk '{print $2; exit}'` # get the pid ID of lasted Jetty with Petascope to kill (make sure only 1 process is run background), the [] is trick to avoid grep process id is chosen.

if [[ -z "$pid" ]]; then # pid is empty then could start petascope
   echo 'Jetty with Petascope now is starting.....'

   # First check that port of Jetty is not the same as other program
   portJetty=`cat $installPath'etc/petascope.properties' | grep 'jetty_port'  | awk -F "=" '{print $2}'`

   isPortUsed=`netstat -anpp 2>/dev/null | grep $portJetty | awk '{print $6}'` # check that port is open or not 2>/dev/null to clean the warning: 'you must be root when using netstat'

   if [[  $isPortUsed =~ 'LISTEN' ]]; then # If port is not used (not LISTENT) then could use this port
	echo -e
	echo 'NOTE: Could not start Jetty with Petascope due to conflict with port number: '$portJetty;
	echo 'Please change this port (jetty_port=) in file: '$installPath'etc/petascope.properties'
   else
	echo 'NOTE: Jetty with Petascope using port number: '$portJetty;

        nohup java -cp $petascopePath'jetty.jar:'$petascopePath start_petascope $installPath & # add argument in start_rasdaman.sh.in for what the file you want to change
	#| echo $! > $petascopePath''.pid (to log the pid of Jetty run background)
        # log Petascope in /usr/local/rasdaman/log/petascope.log (don't need > $petascopePath''petascope.log )

        # Check Jetty started successful
        pid=`ps -ef | grep '[r]asdaman/war/jetty.jar' | awk '{print $2; exit}'` # get the pid ID of lasted Jetty with Petascope to kill (make sure only 1 process is run background), the [] is trick to avoid grep process id is chosen.

	if [[ ! -z "$pid" ]]; then # pid is empty then an exception when not start_rasdaman first
	    echo 'NOTE: Jetty with Petascope started succesfully! Work, pid = '$pid
        else
	    echo 'NOTE: Jetty with Petascope start failed. Not work!'
        fi

   fi; # end check port is open
else # check that Jetty has openned
   echo 'NOTE: Jetty with Petascope has been started, PID = '$pid', no need to start it again.'
fi

disown # do not print the petascope log to terminal


#---------------------------------------------------

# if HSQLDB is used for petascope, start HSQLDB server here
if [ "$PETASCOPEDB" == "$PETASCOPEDB_HSQLDB" ]; then
  metadata_url=$(grep metadata_url @sysconfdir@/petascope.properties | awk -F "=" '{print $2}' | tr -d '\n')
  db_name=$(basename "$metadata_url")
  db_file=$(echo "$metadata_url" | awk -F ":" '{ print $NF; }')
  echo -n $MYNAME: starting petascope...
  nohup java -cp @libdir@/hsqldb.jar org.hsqldb.server.Server --database.0 file:$db_file --dbname.0 $db_name > @logdir@/hsqldb.log 2>&1 &
  if [ $? -eq 0 ]; then
    echo done.
  else
    echo failed, see @logdir@/hsqldb.log for more details.
  fi
fi

echo $MYNAME: done.
exit $RC_OK

# --- END ACTION ----------------------------------------------------


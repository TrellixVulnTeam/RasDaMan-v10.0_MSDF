#!/bin/bash
#
# This file is part of rasdaman community.
#
# Rasdaman community is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Rasdaman community is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015 Peter Baumann /
# rasdaman GmbH.
#
# For more information please see <http://www.rasdaman.org>
# or contact Peter Baumann via <baumann@rasdaman.com>.      
#
#
# stop_rasdaman.sh - shut down rasdaman server complex
#
# SYNTAX
#       stop_rasdaman.sh
#
# DESCRIPTION
#       This script terminates rasdaman.
#	First, all server processes are terminated. Then, the server
#	manager (rasmgr) is shut down.
#       To log in to the server, the external variable $RASLOGIN is expected to hold
#       an ID string (see rasdaman manual). If not found, a desperate last attempt is
#       made to login as rasadmin/rasadmin. If this fails, no servers are stopped at all.
#
# BE CAREFUL
#	By terminating rasdaman, all open transactions are aborted,
#	and their contents will be irretrievably lost!
#
# PRECONDITIONS
#       - need to have a rasdaman admin login either from $RASLOGIN or as rasadmin/rasadmin
#	- no open transactions or databases, they will be killed and transactions aborted
#

# --- CONSTANTS -----------------------------------------------------

MYNAME=`basename $0`

# sleep time to let rasmgr shutdown servers first
WAIT_FOR_CHILDREN=5

# base DBMS used by petascope
PETASCOPEDB=@petascopedb@
PETASCOPEDB_PGSQL=postgresql
PETASCOPEDB_HSQLDB=hsqldb
PETASCOPEDB_SQLITE=sqlite

# JETTY JAR
JETTY_JAR=jetty.jar

# --- END CONSTANTS -------------------------------------------------

# --- ACTION --------------------------------------------------------

echo -e
echo '----------------Checking stopping Rasdaman Servers----------------';
echo -e

echo $MYNAME: terminating all rasdaman servers

# --- stop rasdaman servers: ---------------------------------------

if [ -z "$RASLOGIN" ]; then
	export RASLOGIN=rasadmin:d293a15562d3e70b6fdc5ee452eaed40
fi

# determine a list of all currently running servers
ALLSERVERS=`@bindir@rascontrol -e -q -x list srv | awk '{ if (\$6 == "UP") print \$2;}'`

# ...and shut down all of them, forcefully (!); any open transaction will be lost
for SRV in $ALLSERVERS
do
	echo -n $MYNAME: terminating server $SRV...
	@bindir@rascontrol -e -q -x down srv $SRV -kill
	echo "done."
done

# --- stop rasmgr: -------------------------------------------------

# give rasserver processes time to disappear
sleep $WAIT_FOR_CHILDREN

# finally shut down the server manager
echo -n "terminating rasdaman server manager(s)..."
@bindir@rascontrol -e -q -x down host -all
echo "done."

echo -n
echo -e


# if HSQLDB is used for petascope, stop HSQLDB server here
if [ "$PETASCOPEDB" == "$PETASCOPEDB_HSQLDB" ]; then
  metadata_url=$(grep metadata_url @sysconfdir@/petascope.properties | awk -F "=" '{print $2}' | tr -d '\n')
  db_name=$(basename "$metadata_url")
  db_file=$(echo "$metadata_url" | awk -F ":" '{ print $NF; }')
  echo -n "$MYNAME: terminating petascope database..."
  kill $(pgrep -f org.hsqldb.server.Server)
  echo "done."
fi

# --- B: Terminate Embedded Petascope if it is running ----------------------------------------------------

# get the pid of lasted embedded Jetty with Petascope (only 1 process is allowed to run in background)
# the [] is trick to avoid grep's pid is chosen instead of running Jetty.
pid=$(ps -ef | grep '[r]asdaman/war/jetty.jar' | awk '{print $2; exit}')

if [[ ! -z "$pid" ]]; then # pid is not empty then need to terminate running embedded Petascope
   echo -e
   echo '----------------Checking stopping embedded Petascope at PID = "'$pid'"----';
   echo -e
   kill -9 $pid;
   # get the pid of lasted embedded Jetty with Petascope (only 1 process is allowed to run in background)
   # the [] is trick to avoid grep's pid is chosen instead of running Jetty.
   repid=$(ps -ef | grep '[r]asdaman/war/'$JETTY_JAR | awk '{print $2; exit}')

   if [[ ! -z "$redpid" ]]; then # redpid is not empty then need to have an error
       echo $MYNAME: 'Terminate embedded Petascope unsuccessfully. Please kill PID: "'$repid'" manually..Done.'
   else
       echo $MYNAME: 'Terminate embedded Petascope successfully...Done.'
   fi
fi

echo -n
echo -n

# --- END ACTION ----------------------------------------------------


echo $MYNAME: done.
exit $RC_OK


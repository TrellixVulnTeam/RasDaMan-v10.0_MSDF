This is an implementation of the Web Coverage Processing Service (WCPS) over rasdaman, and the Web Coverage Service (WCS) over WCPS. This file contains important information about how to deploy, use, and extend the WCPS service. See the README.WCS file for information about the WCS service. 

======== WCPS ==========

1. Architecture

The service is implemented as a servlet and runs within a servlet container such as tomcat. Given a request for some coverage(s), it uses a relational database to obtain additional information (metadata) about the coverage(s). Then, it connects to a rasdaman server for the data itself.

The distribution also contains a command-line utility for testing. It will not retrieve any data, but will show the resulting radaman queries that would be sent by the servlet.

2. System requirements

1) Java 6 for building and running. Tested with Sun's JDK.
2) A servlet container. Tested with Apache Tomcat 5.5.
3) A relational database for metadata. Tested with PostgreSQL 7.4.
4) A rasdaman raster database. Tested with rasdaman 6.

3. Using the service

1) Ensure that Java 6 is installed: run "javac -version" and "java -version" to verify.
2) Install rasdaman with any collections which you want WCPS to serve as coverages. Note that a single collection is mapped to a single coverage, once metadata has been defined for that identifier.
3) Create a relational database, and fill it with metadata (see 4.).
4) Within the distribution directory where you found this README, edit dbparams.properties to point WCPS to the correct databases and access credentials.
TODO: Ideally, WCPS should have sane defaults (this host, database name "WCPS", no password, etc.) and should allow editing these via an internal web-page, as well as on first run. Feel free to implement this and remove this note.
6) Optionally, edit the first line of Makefile to give the service a name. This name will also be the URL suffix within the servlet container where the service will be deployed. Different instances of WCPS can coexist, as long as each has a different name.
7) Build the service via "make". This will output a .war distribution file with the service name given above.
8) Deploy the .war file to your servlet container.
9) Visit the URL under which you deployed the service. You will get a web page with instructions about the various ways a WCPS request can be submitted to the service.
10) Submit a request for any coverage. If it succeeds, then the metadata defined for all coverages is valid.
11) Optionally, build the command-line interface with "make cli" and use it by executing wcps.sh in the same directory as this README. Note: "make cli" assumes "make" has already been executed; if not, try "make all".

4. The metadata database

In rasdaman, a collection is just a multi-dimensional array. The data required to serve such an array as a coverage is called metadata. The current version of WCPS uses a relational database to obtain metadata, but it can be extended to any metadata source in the future.

The metadata database has the structure specified by the misc/postgresql_metadata_definitions.sql. The SQL within will work on PostgreSQL, and should work on other DBMSs too. The meaning of the tables is described in that file as comments.

When deploying WCPS for the first time, initialize a new database by directly executing the SQL statements within the file. Then, insert the metadata you need manually. A metadata editor for WCPS is being developed.

IMPORTANT: WCPS will not see any metadata changes until it is restarted. This is by design. After you update anything in the metadata database, test your changes with the command-line interface. A single test is enough: if one request goes through, all metadata is valid. After you have verified this, restart WCPS to use the new metadata.

TODO: WCPS should have a way to ask it to reread metadata without restarting, via some internal webpage. Feel free to implement this and remove this note.

5. Directory structure

The WCPS distribution contains the following directories and files:

doc/                    Documentation for WCPS, WCS, rasql, and rasj.
examples/               Example XML requests, one for each supported operation.
lib/                    Required compiletime (see Makefile) and runtime (see Makefile and wcps.sh) libraries.
misc/                   The metadata database initialization SQL statements.
src/                    All Java source code.
xml/                    The XML schema used by WCPS. The wcpsAll.xsd file is not used by WCPS.
dbparams.properties     Contains all information regarding database connections.
Makefile                Used to build WCPS.
README.WCPS             This file.
wcps.sh                 A rudimentary script to run the command-line interface conveniently.
web.xml                 A servlet descriptor required to deploy a service.

6. Further reading

For more information on WCPS or rasdaman's query language, see the doc directory.


//patched by awk 1
#include "config.h"
#include "raslib/error.hh"
#include "servercomm/servercomm.hh"
#include <new>
char *secureResultBufferForRPC;
bool bMemFailed = false;
//end patched by awk 1
/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "rpcif.h"
#include <stdio.h>
#include <stdlib.h>
#include <rpc/pmap_clnt.h>
#include <string.h>
#include <memory.h>
#include <sys/socket.h>
#include <netinet/in.h>

#ifndef SIG_PF
#define SIG_PF void(*)(int)
#endif

//patched by awk 3
char*
//end patched by awk 3
rpcif_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
//patched by awk 4
char* retvalTxt = 0;
//end patched by awk 4
	union {
		int rpcgetserverversion_1_arg;
		int rpcshutdown_1_arg;
		int rpcserverstat_1_arg;
		u_long rpckilltableentry_1_arg;
		u_long rpcalive_1_arg;
		OpenDBParams rpcopendb_1_arg;
		u_long rpcclosedb_1_arg;
		char *rpccreatedb_1_arg;
		char *rpcdestroydb_1_arg;
		BeginTAParams rpcbeginta_1_arg;
		u_long rpccommitta_1_arg;
		u_long rpcabortta_1_arg;
		ExecuteQueryParams rpcexecutequery_1_arg;
		u_long rpcgetnextmdd_1_arg;
		OIdSpecParams rpcgetmddbyoid_1_arg;
		u_long rpcgetnexttile_1_arg;
		u_long rpcendtransfer_1_arg;
		u_long rpcinitexecuteupdate_1_arg;
		ExecuteQueryParams rpcexecuteupdate_1_arg;
		InsertTransMDDParams rpcstartinserttransmdd_1_arg;
		InsertPersMDDParams rpcstartinsertpersmdd_1_arg;
		InsertTileParams rpcinserttile_1_arg;
		EndInsertMDDParams rpcendinsertmdd_1_arg;
		InsertMDDParams rpcinsertmdd_1_arg;
		NameSpecParams rpcgetcollbyname_1_arg;
		OIdSpecParams rpcgetcollbyoid_1_arg;
		NameSpecParams rpcgetcolloidsbyname_1_arg;
		OIdSpecParams rpcgetcolloidsbyoid_1_arg;
		InsertCollParams rpcinsertcoll_1_arg;
		NameSpecParams rpcdeletecollbyname_1_arg;
		OIdSpecParams rpcdeleteobjbyoid_1_arg;
		RemoveObjFromCollParams rpcremoveobjfromcoll_1_arg;
		NewOIdParams rpcgetnewoid_1_arg;
		OIdSpecParams rpcgetobjecttype_1_arg;
		GetTypeStructureParams rpcgettypestructure_1_arg;
		u_long rpcgetnextelement_1_arg;
		int rpcgetserverendian_1_arg;
		SetServerTransferParams rpcsetservertransfer_1_arg;
		SetServerTransferParams rpcsetserverstorage_1_arg;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
//patched by awk 5
return retvalTxt;
//end patched by awk 5

	case RPCGETSERVERVERSION:
		_xdr_argument = (xdrproc_t) xdr_int;
		_xdr_result = (xdrproc_t) xdr_ServerVersionRes;
		local = (char *(*)(char *, struct svc_req *)) rpcgetserverversion_1_svc;
		break;

	case RPCSHUTDOWN:
		_xdr_argument = (xdrproc_t) xdr_int;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcshutdown_1_svc;
		break;

	case RPCSERVERSTAT:
		_xdr_argument = (xdrproc_t) xdr_int;
		_xdr_result = (xdrproc_t) xdr_ServerStatRes;
		local = (char *(*)(char *, struct svc_req *)) rpcserverstat_1_svc;
		break;

	case RPCKILLTABLEENTRY:
		_xdr_argument = (xdrproc_t) xdr_u_long;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpckilltableentry_1_svc;
		break;

	case RPCALIVE:
		_xdr_argument = (xdrproc_t) xdr_u_long;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcalive_1_svc;
		break;

	case RPCOPENDB:
		_xdr_argument = (xdrproc_t) xdr_OpenDBParams;
		_xdr_result = (xdrproc_t) xdr_OpenDBRes;
		local = (char *(*)(char *, struct svc_req *)) rpcopendb_1_svc;
		break;

	case RPCCLOSEDB:
		_xdr_argument = (xdrproc_t) xdr_u_long;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcclosedb_1_svc;
		break;

	case RPCCREATEDB:
		_xdr_argument = (xdrproc_t) xdr_wrapstring;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpccreatedb_1_svc;
		break;

	case RPCDESTROYDB:
		_xdr_argument = (xdrproc_t) xdr_wrapstring;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcdestroydb_1_svc;
		break;

	case RPCBEGINTA:
		_xdr_argument = (xdrproc_t) xdr_BeginTAParams;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcbeginta_1_svc;
		break;

	case RPCCOMMITTA:
		_xdr_argument = (xdrproc_t) xdr_u_long;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpccommitta_1_svc;
		break;

	case RPCABORTTA:
		_xdr_argument = (xdrproc_t) xdr_u_long;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcabortta_1_svc;
		break;

	case RPCEXECUTEQUERY:
		_xdr_argument = (xdrproc_t) xdr_ExecuteQueryParams;
		_xdr_result = (xdrproc_t) xdr_ExecuteQueryRes;
		local = (char *(*)(char *, struct svc_req *)) rpcexecutequery_1_svc;
		break;

	case RPCGETNEXTMDD:
		_xdr_argument = (xdrproc_t) xdr_u_long;
		_xdr_result = (xdrproc_t) xdr_GetMDDRes;
		local = (char *(*)(char *, struct svc_req *)) rpcgetnextmdd_1_svc;
		break;

	case RPCGETMDDBYOID:
		_xdr_argument = (xdrproc_t) xdr_OIdSpecParams;
		_xdr_result = (xdrproc_t) xdr_GetMDDRes;
		local = (char *(*)(char *, struct svc_req *)) rpcgetmddbyoid_1_svc;
		break;

	case RPCGETNEXTTILE:
		_xdr_argument = (xdrproc_t) xdr_u_long;
		_xdr_result = (xdrproc_t) xdr_GetTileRes;
		local = (char *(*)(char *, struct svc_req *)) rpcgetnexttile_1_svc;
		break;

	case RPCENDTRANSFER:
		_xdr_argument = (xdrproc_t) xdr_u_long;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcendtransfer_1_svc;
		break;

	case RPCINITEXECUTEUPDATE:
		_xdr_argument = (xdrproc_t) xdr_u_long;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcinitexecuteupdate_1_svc;
		break;

	case RPCEXECUTEUPDATE:
		_xdr_argument = (xdrproc_t) xdr_ExecuteQueryParams;
		_xdr_result = (xdrproc_t) xdr_ExecuteUpdateRes;
		local = (char *(*)(char *, struct svc_req *)) rpcexecuteupdate_1_svc;
		break;

	case RPCSTARTINSERTTRANSMDD:
		_xdr_argument = (xdrproc_t) xdr_InsertTransMDDParams;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcstartinserttransmdd_1_svc;
		break;

	case RPCSTARTINSERTPERSMDD:
		_xdr_argument = (xdrproc_t) xdr_InsertPersMDDParams;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcstartinsertpersmdd_1_svc;
		break;

	case RPCINSERTTILE:
		_xdr_argument = (xdrproc_t) xdr_InsertTileParams;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcinserttile_1_svc;
		break;

	case RPCENDINSERTMDD:
		_xdr_argument = (xdrproc_t) xdr_EndInsertMDDParams;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcendinsertmdd_1_svc;
		break;

	case RPCINSERTMDD:
		_xdr_argument = (xdrproc_t) xdr_InsertMDDParams;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcinsertmdd_1_svc;
		break;

	case RPCGETCOLLBYNAME:
		_xdr_argument = (xdrproc_t) xdr_NameSpecParams;
		_xdr_result = (xdrproc_t) xdr_GetCollRes;
		local = (char *(*)(char *, struct svc_req *)) rpcgetcollbyname_1_svc;
		break;

	case RPCGETCOLLBYOID:
		_xdr_argument = (xdrproc_t) xdr_OIdSpecParams;
		_xdr_result = (xdrproc_t) xdr_GetCollRes;
		local = (char *(*)(char *, struct svc_req *)) rpcgetcollbyoid_1_svc;
		break;

	case RPCGETCOLLOIDSBYNAME:
		_xdr_argument = (xdrproc_t) xdr_NameSpecParams;
		_xdr_result = (xdrproc_t) xdr_GetCollOIdsRes;
		local = (char *(*)(char *, struct svc_req *)) rpcgetcolloidsbyname_1_svc;
		break;

	case RPCGETCOLLOIDSBYOID:
		_xdr_argument = (xdrproc_t) xdr_OIdSpecParams;
		_xdr_result = (xdrproc_t) xdr_GetCollOIdsRes;
		local = (char *(*)(char *, struct svc_req *)) rpcgetcolloidsbyoid_1_svc;
		break;

	case RPCINSERTCOLL:
		_xdr_argument = (xdrproc_t) xdr_InsertCollParams;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcinsertcoll_1_svc;
		break;

	case RPCDELETECOLLBYNAME:
		_xdr_argument = (xdrproc_t) xdr_NameSpecParams;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcdeletecollbyname_1_svc;
		break;

	case RPCDELETEOBJBYOID:
		_xdr_argument = (xdrproc_t) xdr_OIdSpecParams;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcdeleteobjbyoid_1_svc;
		break;

	case RPCREMOVEOBJFROMCOLL:
		_xdr_argument = (xdrproc_t) xdr_RemoveObjFromCollParams;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcremoveobjfromcoll_1_svc;
		break;

	case RPCGETNEWOID:
		_xdr_argument = (xdrproc_t) xdr_NewOIdParams;
		_xdr_result = (xdrproc_t) xdr_OIdRes;
		local = (char *(*)(char *, struct svc_req *)) rpcgetnewoid_1_svc;
		break;

	case RPCGETOBJECTTYPE:
		_xdr_argument = (xdrproc_t) xdr_OIdSpecParams;
		_xdr_result = (xdrproc_t) xdr_ObjectTypeRes;
		local = (char *(*)(char *, struct svc_req *)) rpcgetobjecttype_1_svc;
		break;

	case RPCGETTYPESTRUCTURE:
		_xdr_argument = (xdrproc_t) xdr_GetTypeStructureParams;
		_xdr_result = (xdrproc_t) xdr_GetTypeStructureRes;
		local = (char *(*)(char *, struct svc_req *)) rpcgettypestructure_1_svc;
		break;

	case RPCGETNEXTELEMENT:
		_xdr_argument = (xdrproc_t) xdr_u_long;
		_xdr_result = (xdrproc_t) xdr_GetElementRes;
		local = (char *(*)(char *, struct svc_req *)) rpcgetnextelement_1_svc;
		break;

	case RPCGETSERVERENDIAN:
		_xdr_argument = (xdrproc_t) xdr_int;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (char *(*)(char *, struct svc_req *)) rpcgetserverendian_1_svc;
		break;

	case RPCSETSERVERTRANSFER:
		_xdr_argument = (xdrproc_t) xdr_SetServerTransferParams;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcsetservertransfer_1_svc;
		break;

	case RPCGETERRORINFO:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_GetExtendedErrorInfo;
		local = (char *(*)(char *, struct svc_req *)) rpcgeterrorinfo_1_svc;
		break;

	case RPCSETSERVERSTORAGE:
		_xdr_argument = (xdrproc_t) xdr_SetServerTransferParams;
		_xdr_result = (xdrproc_t) xdr_u_short;
		local = (char *(*)(char *, struct svc_req *)) rpcsetserverstorage_1_svc;
		break;

	default:
		svcerr_noproc (transp);
//patched by awk 5
return retvalTxt;
//end patched by awk 5
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
//patched by awk 5
return retvalTxt;
//end patched by awk 5
	}
//patched by awk 2
	try	{
//end patched by awk 2
	result = (*local)((char *)&argument, rqstp);
//patched by awk 2.1
		}
	catch (r_Error& e)
		{
		retvalTxt = e.serialiseError();
		u_short temp = 42;
		result = secureResultBufferForRPC;
		memcpy(result, (char*)&temp, sizeof(u_short));
		}
	catch (std::bad_alloc)
		{
		bMemFailed = true;
		ServerComm* sc = ServerComm::actual_servercomm;
		r_Ememory_allocation e;
		retvalTxt = e.serialiseError();
		u_short temp = 42;
		result = secureResultBufferForRPC;
		memcpy(result, (char*)&temp, sizeof(u_short));
		
		}
//end patched by awk 2.1
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
//patched by awk 5
return retvalTxt;
//end patched by awk 5
}
